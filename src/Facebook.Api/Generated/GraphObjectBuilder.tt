<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(ProjectDir)HtmlAgilityPack.dll" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #>
<#@ include file="Settings.ttinclude" #>
<#@ include file="Shared.ttinclude" #> 
// --------------------------------
// <copyright file="GraphObjectBuilder.tt" company="Thuzi, LLC">
//     Copyright (c) 2010 Thuzi, LLC (thuzi.com)
// </copyright>
// <author>Nathan Totten (ntotten.com) and Jim Zimmerman (jimzimmerman.com)</author>
// <license>Released under the terms of the Microsoft Public License (Ms-PL)</license>
// <website>http://facebooksdk.codeplex.com</website>
// <autogenerated>
//   This file was generated using <#= Path.GetFileName(Host.TemplateFile) #>.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
// ---------------------------------

using System;
using System.Collections.ObjectModel; 

<# var objs =  GetObjects(GraphObjects); #>

namespace <#=ModelNamespace #>.Graph {

<# foreach (var obj in objs) {#>

	public partial class Facebook<#=obj.ProperName#> {

	<# foreach(var prop in obj.Properties) { #>

		/// <summary>
	<# WriteCodeComments(prop.Description); #>
		/// </summary>
		public <#=prop.Type#> <#=ToProperName(prop.Name, obj.ProperName)#> { get; set; }

	<#}#>
	}
	
	<# if (obj.PublishProps.Count > 0) { #>
	
	public partial class Facebook<#=obj.ProperName#>Publish {
	
		<# foreach(var prop in obj.PublishProps) { #>

		/// <summary>
	<# WriteCodeComments(prop.Description); #>
		/// </summary>
		public string <#=ToProperName(prop.Name, obj.ProperName)#> { get; set; }

	<#}#>
	
	}
	
	<# } else if (obj.Name == "events") { #>
	
		// This is included here manually because facebooks documetionation is not up to date
		// on the page http://developers.facebook.com/docs/reference/api/event

		public partial class FacebookEventPublish
		{

			public string Name { get; set; }

			public string StartTime { get; set; }

			public string EndTime { get; set; }

		}
	
	<#}#>

<#}#>

}

namespace <#=SchemaNamespace #>.Graph {

<# foreach (var obj in objs) {#>

	public partial class Facebook<#=obj.ProperName#> {

	<# foreach(var prop in obj.Properties) { #>

		/// <summary>
	<# WriteCodeComments(prop.Description); #>
		/// </summary>
		public <#=prop.Type#> <#=CleanName(prop.Name)#> { get; set; }

	<#}#>

		public static class Connections {
			<# foreach(var conn in obj.Connections) { #>

				/// <summary>
			<# WriteCodeComments(conn.Description); #>
				/// </summary>
				public const string <#=ToProperName(conn.Name)#> = "<#=conn.Name#>";

			<#}#>
		}

	}
	
	<# if (obj.PublishProps.Count > 0) { #>
	
	public partial class Facebook<#=obj.ProperName#>Publish {
	
		<# foreach(var prop in obj.PublishProps) { #>

		/// <summary>
	<# WriteCodeComments(prop.Description); #>
		/// </summary>
		public string <#=CleanName(prop.Name)#> { get; set; }

	<#}#>
	
	}
	
	<# } else if (obj.Name == "events") { #>
	
		// This is included here manually because facebooks documetionation is not up to date
		// on the page http://developers.facebook.com/docs/reference/api/event

		public partial class FacebookEventPublish
		{

			public string name { get; set; }

			public string start_time { get; set; }

			public string end_time { get; set; }

		}
	
	<#}#>

<#}#>

}



<#+

	public List<ObjectDef> GetObjects(string[] list) {
		List<ObjectDef> objs = new List<ObjectDef>();
		foreach (var objectName in list) {
			objs.Add(GetObject(objectName));
		}
		return objs;
	}

	public ObjectDef GetObject(string objectName) {
		List<ObjectProperty> props = new List<ObjectProperty>();
		List<ObjectProperty> connections = new List<ObjectProperty>();
		List<ObjectProperty> publishProps = new List<ObjectProperty>();
		
		var url = string.Format(Url, "api", objectName);
		var web = new HtmlAgilityPack.HtmlWeb();
		var doc = web.Load(url);
		var nodes = doc.DocumentNode.Descendants("table");
		HtmlAgilityPack.HtmlNode propNode = null;
		HtmlAgilityPack.HtmlNode connectionsNode = null;
		HtmlAgilityPack.HtmlNode publishNode = null;
		int index = 0;
		foreach (var node in nodes) {
			if (index == 1) {
				propNode = node;
			}
			if (index == 2) {
				connectionsNode = node;
			}
			if (index == 3) {
				publishNode = node;
			}
			index++;
		}
		
		if (propNode != null) {
			FillProperties(propNode, props);
		}
		if (connectionsNode != null) {
			FillProperties(connectionsNode, connections, false);
		}
		if (publishNode != null) {
			FillProperties(publishNode, publishProps, false);
		}
				
		return new ObjectDef {
			Name = objectName,
			ProperName = ToProperName(objectName),
			Properties = props,
			Connections = connections,
			PublishProps = publishProps,
		};
	}
	
	public void FillProperties(HtmlAgilityPack.HtmlNode node, List<ObjectProperty> properties, bool skipFirstRow = true) {
		var rows = node.Descendants("tr");

		bool first = skipFirstRow;
		foreach (var row in rows) {
			if (first) {
				first = false;
			} else {
				if (row != null) {
					var columns = row.Descendants("td");
					ObjectProperty prop = new ObjectProperty();
					int c = 0;
					foreach (var column in columns) {
						switch (c) {
							case 0:
								prop.Name = column.InnerText.Trim();
								prop.Type = GetTypeNameFromProperty(prop.Name);
								break;
							case 1:
								prop.Description = column.InnerText.Trim();
								break;
						}
						c++;
					}
					properties.Add(prop);
				}
			}
		}
	}

#>