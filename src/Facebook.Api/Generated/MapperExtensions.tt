<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #>
<#@ include file="Settings.ttinclude" #>
<#@ include file="Shared.ttinclude" #> 
// --------------------------------
// <copyright file="MapperExtensions.tt" company="Thuzi, LLC">
//     Copyright (c) 2010 Thuzi, LLC (thuzi.com)
// </copyright>
// <author>Nathan Totten (ntotten.com) and Jim Zimmerman (jimzimmerman.com)</author>
// <license>Released under the terms of the Microsoft Public License (Ms-PL)</license>
// <website>http://facebooksdk.codeplex.com</website>
// <autogenerated>
//   This file was generated using <#= Path.GetFileName(Host.TemplateFile) #>.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
// ---------------------------------

using System;
using System.Collections.Generic;
using Facebook.Api;
using AutoMapper;

namespace <#=ModelNamespace#>.Fql {

<# foreach (var obj in FqlObjects) { 
	var properName = "Facebook" + ToProperName(obj); #>
	
	public partial class <#=properName#> {
	 		
			public <#=SchemaNamespace#>.Fql.<#=properName#> ToSchema() {
				if (Mapper.FindTypeMapFor<<#=ModelNamespace#>.Fql.<#=properName#>, <#=SchemaNamespace#>.Fql.<#=properName#>>() == null) {
					Mapper.CreateMap<<#=ModelNamespace#>.Fql.<#=properName#>, <#=SchemaNamespace#>.Fql.<#=properName#>>();
				}
				return Mapper.Map<<#=ModelNamespace#>.Fql.<#=properName#>, <#=SchemaNamespace#>.Fql.<#=properName#>>(this);
			}
			
			public static <#=ModelNamespace#>.Fql.<#=properName#> FromDynamic(dynamic value) {
                return FacebookMapper.Map<<#=SchemaNamespace#>.Fql.<#=properName#>, <#=ModelNamespace#>.Fql.<#=properName#>>(value);
            }
			
	 }
	
<# } #>

}

namespace <#=ModelNamespace#>.Graph {

<# foreach (var obj in GraphObjects) {
	 var properName = "Facebook" + ToProperName(obj); #>
	 
	 public partial class <#=properName#> {
	 		
			public <#=SchemaNamespace#>.Graph.<#=properName#> ToSchema() {
				if (Mapper.FindTypeMapFor<<#=ModelNamespace#>.Graph.<#=properName#>, <#=SchemaNamespace#>.Graph.<#=properName#>>() == null) {
					Mapper.CreateMap<<#=ModelNamespace#>.Graph.<#=properName#>, <#=SchemaNamespace#>.Graph.<#=properName#>>();
				}
				return Mapper.Map<<#=ModelNamespace#>.Graph.<#=properName#>, <#=SchemaNamespace#>.Graph.<#=properName#>>(this);
			}
			
			public static <#=ModelNamespace#>.Graph.<#=properName#> FromDynamic(dynamic value) {
                return FacebookMapper.Map<<#=SchemaNamespace#>.Graph.<#=properName#>, <#=ModelNamespace#>.Graph.<#=properName#>>(value);
            }
			
	 }

<# } #>

}

namespace <#=SchemaNamespace#>.Fql {

<# foreach (var obj in FqlObjects) { 
	var properName = "Facebook" + ToProperName(obj); #>
	
	public partial class <#=properName#> {
	 		
			public <#=ModelNamespace#>.Fql.<#=properName#> ToModel() {
				if (Mapper.FindTypeMapFor<<#=SchemaNamespace#>.Fql.<#=properName#>, <#=ModelNamespace#>.Fql.<#=properName#>>() == null) {
					Mapper.CreateMap<<#=SchemaNamespace#>.Fql.<#=properName#>, <#=ModelNamespace#>.Fql.<#=properName#>>();
				}
				return Mapper.Map<<#=SchemaNamespace#>.Fql.<#=properName#>, <#=ModelNamespace#>.Fql.<#=properName#>>(this);
			}
			
			public static <#=SchemaNamespace#>.Fql.<#=properName#> FromDynamic(dynamic value) {
                return FacebookMapper.Map<<#=SchemaNamespace#>.Fql.<#=properName#>>(value);
            }
			
	 }
	
<# } #>

}

namespace <#=SchemaNamespace#>.Graph {

<# foreach (var obj in GraphObjects) {
	 var properName = "Facebook" + ToProperName(obj); #>
	 
	 public partial class <#=properName#> {
	 		
			public <#=ModelNamespace#>.Graph.<#=properName#> ToModel() {
	            if (Mapper.FindTypeMapFor<<#=SchemaNamespace#>.Graph.<#=properName#>, <#=ModelNamespace#>.Graph.<#=properName#>>() == null) {
					Mapper.CreateMap<<#=SchemaNamespace#>.Graph.<#=properName#>, <#=ModelNamespace#>.Graph.<#=properName#>>();
				}
				return Mapper.Map<<#=SchemaNamespace#>.Graph.<#=properName#>, <#=ModelNamespace#>.Graph.<#=properName#>>(this);
			}
			
			public static <#=SchemaNamespace#>.Graph.<#=properName#> FromDynamic(dynamic value) {
                return FacebookMapper.Map<<#=SchemaNamespace#>.Graph.<#=properName#>>(value);
            }
			
	 }

<# } #>

}